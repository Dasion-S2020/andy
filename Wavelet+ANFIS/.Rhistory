load('/Users/andyliu/freeagents.csv')
data = read.table('/Users/andyliu/freeagents.csv')
data = read.csv('Users/andyliu/freeagents.csv')
data = read.csv('/Users/andyliu/freeagents.csv')
library(ggplot2)
install.packages('ggplot2')
ggplot(data, aes(poscomms, comms, color = pc, alpha = 1/density)) +
geom_point(shape = 16, size = 5, show.legend = FALSE) +
theme_minimal() +
scale_color_gradient(low = "#32aeff", high = "#f2aeff") +
scale_alpha(range = c(.25, .6)) +geom_text(aes(label=Name),hjust=0, vjust=0)
ggplot2(data, aes(poscomms, comms, color = pc, alpha = 1/density)) +
geom_point(shape = 16, size = 5, show.legend = FALSE) +
theme_minimal() +
scale_color_gradient(low = "#32aeff", high = "#f2aeff") +
scale_alpha(range = c(.25, .6)) +geom_text(aes(label=Name),hjust=0, vjust=0)
install.packages('tidyverse')
install.packages('rlang')
install.packages('tidyverse')
ggplot2(data, aes(poscomms, comms, color = pc, alpha = 1/density)) +
geom_point(shape = 16, size = 5, show.legend = FALSE) +
theme_minimal() +
scale_color_gradient(low = "#32aeff", high = "#f2aeff") +
scale_alpha(range = c(.25, .6)) +geom_text(aes(label=Name),hjust=0, vjust=0)
libraries.install('rlang')
install.packages('rlang')
install.packages('ggplot2')
ggplot2(data, aes(poscomms, comms, color = pc, alpha = 1/density)) +
geom_point(shape = 16, size = 5, show.legend = FALSE) +
theme_minimal() +
scale_color_gradient(low = "#32aeff", high = "#f2aeff") +
scale_alpha(range = c(.25, .6)) +geom_text(aes(label=Name),hjust=0, vjust=0)
ggplot(data, aes(poscomms, comms, color = pc, alpha = 1/density)) +
geom_point(shape = 16, size = 5, show.legend = FALSE) +
theme_minimal() +
scale_color_gradient(low = "#32aeff", high = "#f2aeff") +
scale_alpha(range = c(.25, .6)) +geom_text(aes(label=Name),hjust=0, vjust=0)
library(ggplot2)
ggplot2(data, aes(poscomms, comms, color = pc, alpha = 1/density)) +
geom_point(shape = 16, size = 5, show.legend = FALSE) +
theme_minimal() +
scale_color_gradient(low = "#32aeff", high = "#f2aeff") +
scale_alpha(range = c(.25, .6)) +geom_text(aes(label=Name),hjust=0, vjust=0)
ggplot(data, aes(poscomms, comms, color = pc, alpha = 1/density)) +
geom_point(shape = 16, size = 5, show.legend = FALSE) +
theme_minimal() +
scale_color_gradient(low = "#32aeff", high = "#f2aeff") +
scale_alpha(range = c(.25, .6)) +geom_text(aes(label=Name),hjust=0, vjust=0)
ggplot(data, aes(Poscomms, Comms, color = pc, alpha = 1/density)) +
geom_point(shape = 16, size = 5, show.legend = FALSE) +
theme_minimal() +
scale_color_gradient(low = "#32aeff", high = "#f2aeff") +
scale_alpha(range = c(.25, .6)) +geom_text(aes(label=Name),hjust=0, vjust=0)
data$pc ,_ predict(prcomp(~Poscomms+Comms,d))[,1]
data$pc <- predict(prcomp(~Poscomms+Comms,d))[,1]
data$pc <- predict(prcomp(~Poscomms+Comms,data))[,1]
ggplot(data, aes(Poscomms, Comms, color = pc, alpha = 1/density)) +
geom_point(shape = 16, size = 5, show.legend = FALSE) +
theme_minimal() +
scale_color_gradient(low = "#32aeff", high = "#f2aeff") +
scale_alpha(range = c(.25, .6)) +geom_text(aes(label=Name),hjust=0, vjust=0)
data$density <- fields::interp.surface(MASS::kde2d(data$Comms, data$Poscomms), data[,c("Comms", "Poscomms")])
install.package('fields')
install.packages('fields')
library(fields)
ggplot(data, aes(Poscomms, Comms, color = pc, alpha = 1/density)) +
geom_point(shape = 16, size = 5, show.legend = FALSE) +
theme_minimal() +
scale_color_gradient(low = "#32aeff", high = "#f2aeff") +
scale_alpha(range = c(.25, .6)) +geom_text(aes(label=Name),hjust=0, vjust=0)
data$density <- fields::interp.surface(MASS::kde2d(data$Comms, data$Poscomms), data[,c("Comms", "Poscomms")])
ggplot(data, aes(Poscomms, Comms, color = pc, alpha = 1/density)) +
geom_point(shape = 16, size = 5, show.legend = FALSE) +
theme_minimal() +
scale_color_gradient(low = "#32aeff", high = "#f2aeff") +
scale_alpha(range = c(.25, .6)) +geom_text(aes(label=Name),hjust=0, vjust=0)
ggplot(data, aes(Comms, Poscomms, color = pc, alpha = 1/density)) +
geom_point(shape = 16, size = 5, show.legend = FALSE) +
theme_minimal() +
scale_color_gradient(low = "#32aeff", high = "#f2aeff") +
scale_alpha(range = c(.25, .6)) +geom_text(aes(label=Name),hjust=0, vjust=0)
sp <- ggplot(data, aes(Comms, Poscomms, color = pc, alpha = 1/density)) +
geom_point(shape = 16, size = 5, show.legend = FALSE) +
theme_minimal() +
scale_color_gradient(low = "#32aeff", high = "#f2aeff") +
scale_alpha(range = c(.25, .6)) +geom_text(aes(label=Name),hjust=0, vjust=0)
sp + scale_x_continuous(trans='log2')
install.packages('ggrepel')
library(ggrepel)
sp <- ggplot(data, aes(Comms, Poscomms, color = pc, alpha = 1/density)) +
geom_point(shape = 16, size = 5, show.legend = FALSE) +
theme_minimal() +
scale_color_gradient(low = "#32aeff", high = "#f2aeff") +
scale_alpha(range = c(.25, .6)) +geom_text(aes(label=Name),hjust=0, vjust=0)
sp <- ggplot(data, aes(Comms, Poscomms, color = pc, alpha = 1/density)) +
geom_point(shape = 16, size = 5, show.legend = FALSE) +
theme_minimal() +
scale_color_gradient(low = "#32aeff", high = "#f2aeff") +
scale_alpha(range = c(.25, .6)) +geom_text_repel(aes(label=Name),hjust=0, vjust=0)
sp <- ggplot(data, aes(Comms, Poscomms, color = pc, alpha = 1/density)) +
geom_point(shape = 16, size = 5, show.legend = FALSE) +
theme_minimal() +
scale_color_gradient(low = "#32aeff", high = "#f2aeff") +
scale_alpha(range = c(.25, .6)) +geom_text_repel(aes(label=Name),hjust=0, vjust=0)
sp <- ggplot(data, aes(Comms, Poscomms, label = Name color = pc, alpha = 1/density)) +
geom_point(shape = 16, size = 5, show.legend = FALSE) +
theme_minimal() +
scale_color_gradient(low = "#32aeff", high = "#f2aeff") +
scale_alpha(range = c(.25, .6)) +geom_text_repel()
sp <- ggplot(data, aes(Comms, Poscomms, label = Name, color = pc, alpha = 1/density)) +
geom_point(shape = 16, size = 5, show.legend = FALSE) +
theme_minimal() +
scale_color_gradient(low = "#32aeff", high = "#f2aeff") +
scale_alpha(range = c(.25, .6)) +geom_text_repel()
sp <- ggplot(data, aes(Comms, Poscomms, label = Name, color = pc, alpha = 1/density)) +
geom_point(shape = 16, size = 5, show.legend = FALSE) +
theme_minimal() +
scale_color_gradient(low = "#32aeff", high = "#f2aeff") +
scale_alpha(range = c(.25, .6)) +geom_label_repel(arrow = arrow(length = unit(0.03, "npc"), type = "closed", ends = "first"),
force = 5,
xlim  = x_limits)
sp <- ggplot(data, aes(Comms, Poscomms, label = Name, color = pc, alpha = 1/density)) +
geom_point(shape = 16, size = 5, show.legend = FALSE) +
theme_minimal() +
scale_color_gradient(low = "#32aeff", high = "#f2aeff") +
scale_alpha(range = c(.25, .6)) +geom_label_repel(arrow = arrow(length = unit(0.03, "npc"), type = "closed", ends = "first"))
transportation <- c()
train_x = read.csv('train_x.csv')
setwd('/Users/andyliu/develop/andy/Wavelet+ANFIS')
train_x = read.csv('train_x.csv')
test_x = read.csv('test_x.csv')
train_y = read.csv('train_y.csv')
test_y = read.csv('test_y.csv')
train = cbind(train_x, train_y)
View(test_x)
library(frbs)
object <- frbs.learn(train, range.data=NULL, method.type=c('ANFIS'))
predict <- predict(object, test_x)
predict
predict <- predict(object, test_x)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
test_x_n = normalize(test_x, method = "standardize", range = c(0, 1))
test_x_n = normalize(test_x)
predict <- predict(object, test_x_n)
asdf
predict
test_y_n = normalize(test_y)
train_y_n = normalize(train_y)
train_x.head()
train_x
train_n = cbind(train_x, train_y_n)
object <- frbs.learn(train_n, range.data=NULL, method.type=c('ANFIS'))
predict <- predict(object, test_x_n)
predict
predict <- predict(object, test_x_n)
RD = matrix(c(0, 1, 0, 1, 0, 1, 0, 1, 0, 1,0, 1, 0, 1, 0, 1, 0, 1, 0, 1,0,1,0,1,0,1), nrow=2, col=13)
RD = matrix(c(0, 1, 0, 1, 0, 1, 0, 1, 0, 1,0, 1, 0, 1, 0, 1, 0, 1, 0, 1,0,1,0,1,0,1), nrow=2, ncol=13)
control.ANFIS <- list(num.labels = 5, max.iter = 10, step.size = 0.01, type.tnorm = "MIN", type.implication.func = "gbell", name = "test")
obj <- frbs.learn(train_n, RD, 'anfis', control.ANFIS)
control.ANFIS <- list(num.labels = 2, max.iter = 10, step.size = 0.01, type.tnorm = "MIN", type.implication.func = "gbell", name = "test")
obj <- frbs.learn(train_n, RD, 'anfis', control.ANFIS)
predict <- predict(object, test_x_n)
test_x_n
predict <- predict(obj, test_x_n)
predict
save.image("~/develop/andy/Wavelet+ANFIS/86attempt.RData")
predict1 <- predict(obj, test_x_n)
control.ANFIS <- list(num.labels = 12, max.iter = 10, step.size = 0.01, type.tnorm = "MIN", type.implication.func = "gbell", name = "test")
obj <- frbs.learn(train_n, RD, 'anfis', control.ANFIS)
save.image("~/develop/andy/Wavelet+ANFIS/86attempt.RData")
